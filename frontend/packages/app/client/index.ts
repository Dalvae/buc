/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/login/access-token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Login Access Token
     * @description OAuth2 compatible token login, get an access token for future requests
     */
    post: operations['login-login_access_token']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/login/test-token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Test Token
     * @description Test access token
     */
    post: operations['login-test_token']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/password-recovery/{email}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Recover Password
     * @description Password Recovery
     */
    post: operations['login-recover_password']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reset-password/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Reset Password
     * @description Reset password
     */
    post: operations['login-reset_password']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/password-recovery-html-content/{email}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Recover Password Html Content
     * @description HTML Content for Password Recovery
     */
    post: operations['login-recover_password_html_content']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/users/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read Users
     * @description Retrieve users.
     */
    get: operations['users-read_users']
    put?: never
    /**
     * Create User
     * @description Create new user.
     */
    post: operations['users-create_user']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/users/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read User Me
     * @description Get current user.
     */
    get: operations['users-read_user_me']
    put?: never
    post?: never
    /**
     * Delete User Me
     * @description Delete own user.
     */
    delete: operations['users-delete_user_me']
    options?: never
    head?: never
    /**
     * Update User Me
     * @description Update own user.
     */
    patch: operations['users-update_user_me']
    trace?: never
  }
  '/api/v1/users/me/password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update Password Me
     * @description Update own password.
     */
    patch: operations['users-update_password_me']
    trace?: never
  }
  '/api/v1/users/signup': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Register New User
     * @description Create new user without the need to be logged in.
     */
    post: operations['users-register_new_user']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/users/{user_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read User By Id
     * @description Get a specific user by id.
     */
    get: operations['users-read_user_by_id']
    put?: never
    post?: never
    /**
     * Delete User
     * @description Delete a user.
     */
    delete: operations['users-delete_user']
    options?: never
    head?: never
    /**
     * Update User
     * @description Update a user.
     */
    patch: operations['users-update_user']
    trace?: never
  }
  '/api/v1/users/{user_id}/assign-areas': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Assign User To Areas
     * @description Assign a user to multiple areas. This will overwrite existing assignments.
     *     The areas must belong to the user's primary company.
     */
    post: operations['users-assign_user_to_areas']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/users/{user_id}/remove-area/{area_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Remove User From Area
     * @description Remove a user's assignment from a specific area.
     */
    delete: operations['users-remove_user_from_area']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/utils/test-email/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Test Email
     * @description Test emails.
     */
    post: operations['utils-test_email']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/utils/health-check/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Health Check */
    get: operations['utils-health_check']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/companies/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read Companies
     * @description Retrieve companies.
     */
    get: operations['companies-read_companies']
    put?: never
    /**
     * Create Company
     * @description Create new company.
     */
    post: operations['companies-create_company']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/companies/{company_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read Company By Id
     * @description Get a specific company by id.
     */
    get: operations['companies-read_company_by_id']
    put?: never
    post?: never
    /**
     * Delete Company
     * @description Delete a company.
     */
    delete: operations['companies-delete_company']
    options?: never
    head?: never
    /**
     * Update Company
     * @description Update a company.
     */
    patch: operations['companies-update_company']
    trace?: never
  }
  '/api/v1/companies/{company_id}/areas/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read Areas
     * @description Retrieve areas for a specific company.
     */
    get: operations['areas-read_areas']
    put?: never
    /**
     * Create Area
     * @description Create new area within a company.
     */
    post: operations['areas-create_area']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/companies/{company_id}/areas/{area_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read Area By Id
     * @description Get a specific area by id.
     */
    get: operations['areas-read_area_by_id']
    put?: never
    post?: never
    /**
     * Delete Area
     * @description Delete an area.
     */
    delete: operations['areas-delete_area']
    options?: never
    head?: never
    /**
     * Update Area
     * @description Update an area.
     */
    patch: operations['areas-update_area']
    trace?: never
  }
  '/api/v1/audit-templates/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read Audit Templates
     * @description Retrieve audit templates.
     */
    get: operations['audit-templates-read_audit_templates']
    put?: never
    /**
     * Create Audit Template
     * @description Create new audit template.
     */
    post: operations['audit-templates-create_audit_template']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/audit-templates/types': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Audit Template Types
     * @description Get a list of available code-defined audit template types.
     */
    get: operations['audit-templates-get_audit_template_types']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/audit-templates/{template_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read Audit Template
     * @description Get a specific audit template by id.
     */
    get: operations['audit-templates-read_audit_template']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update Audit Template
     * @description Update an audit template.
     */
    patch: operations['audit-templates-update_audit_template']
    trace?: never
  }
  '/api/v1/audit-templates/{template_id}/questions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read Question Templates For Audit Template
     * @description Retrieve question templates for a specific audit template.
     */
    get: operations['audit-templates-read_question_templates_for_audit_template']
    put?: never
    /**
     * Create Question Template
     * @description Create new question template for an audit template.
     */
    post: operations['audit-templates-create_question_template']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/audit-templates/{template_id}/questions/{question_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read Question Template By Id
     * @description Get a specific question template by id for a given audit template.
     */
    get: operations['audit-templates-read_question_template_by_id']
    put?: never
    post?: never
    /**
     * Delete Question Template
     * @description Delete a question template from an audit template.
     */
    delete: operations['audit-templates-delete_question_template']
    options?: never
    head?: never
    /**
     * Update Question Template
     * @description Update a question template for an audit template.
     */
    patch: operations['audit-templates-update_question_template']
    trace?: never
  }
  '/api/v1/audit-assignments/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read All Audit Assignments
     * @description Retrieve all audit assignments (Superuser/Admin only).
     */
    get: operations['audit-assignments-read_all_audit_assignments']
    put?: never
    /**
     * Create Audit Assignment
     * @description Create new audit assignment from a template for a company or area.
     */
    post: operations['audit-assignments-create_audit_assignment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/audit-assignments/my-assignments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read My Audit Assignments
     * @description Retrieve audit assignments that the current auditor can respond to.
     */
    get: operations['audit-assignments-read_my_audit_assignments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/audit-assignments/company/{company_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read Audit Assignments For Company
     * @description Retrieve audit assignments for a specific company.
     */
    get: operations['audit-assignments-read_audit_assignments_for_company']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/audit-assignments/{assignment_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read Audit Assignment By Id
     * @description Get a specific audit assignment by id.
     */
    get: operations['audit-assignments-read_audit_assignment_by_id']
    put?: never
    post?: never
    /**
     * Delete Audit Assignment
     * @description Delete an audit assignment.
     */
    delete: operations['audit-assignments-delete_audit_assignment']
    options?: never
    head?: never
    /**
     * Update Audit Assignment
     * @description Update an audit assignment.
     */
    patch: operations['audit-assignments-update_audit_assignment']
    trace?: never
  }
  '/api/v1/audit-assignments/{assignment_id}/responses/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read Audit Responses For Assignment
     * @description Retrieve audit responses for a specific audit assignment.
     */
    get: operations['audit-responses-read_audit_responses_for_assignment']
    put?: never
    /**
     * Create Audit Response
     * @description Create a new audit response for a given assignment.
     */
    post: operations['audit-responses-create_audit_response']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/audit-assignments/{assignment_id}/responses/{response_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read Audit Response By Id
     * @description Get a specific audit response by id.
     */
    get: operations['audit-responses-read_audit_response_by_id']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update Audit Response
     * @description Update an audit response.
     */
    patch: operations['audit-responses-update_audit_response']
    trace?: never
  }
  '/api/v1/audit-assignments/{assignment_id}/assigned-questions/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read Assigned Questions For Assignment
     * @description Retrieve assigned questions for a specific audit assignment.
     */
    get: operations['assigned-questions-read_assigned_questions_for_assignment']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/audit-assignments/{assignment_id}/assigned-questions/{question_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read Assigned Question By Id
     * @description Get a specific assigned question by id for a given audit assignment.
     */
    get: operations['assigned-questions-read_assigned_question_by_id']
    put?: never
    post?: never
    /**
     * Delete Assigned Question
     * @description Delete an assigned question from an audit assignment.
     */
    delete: operations['assigned-questions-delete_assigned_question']
    options?: never
    head?: never
    /**
     * Update Assigned Question
     * @description Update an assigned question for an audit assignment.
     */
    patch: operations['assigned-questions-update_assigned_question']
    trace?: never
  }
  '/api/v1/private/users/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create User
     * @description Create a new user.
     */
    post: operations['private-create_user']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** AnswerCreate */
    AnswerCreate: {
      /** Answer Value */
      answer_value?: unknown | null
      /** Comments */
      comments?: string | null
      /** Photo Urls */
      photo_urls?: string[] | null
      /**
       * Assigned Question Id
       * Format: uuid
       */
      assigned_question_id: string
    }
    /** AnswerPublic */
    AnswerPublic: {
      /** Answer Value */
      answer_value?: unknown | null
      /** Comments */
      comments?: string | null
      /** Photo Urls */
      photo_urls?: string[] | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /**
       * Audit Response Id
       * Format: uuid
       */
      audit_response_id: string
      /**
       * Assigned Question Id
       * Format: uuid
       */
      assigned_question_id: string
    }
    /** AreaCreate */
    AreaCreate: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
    }
    /** AreaPublic */
    AreaPublic: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /**
       * Company Id
       * Format: uuid
       */
      company_id: string
      /**
       * Created At
       * Format: date-time
       */
      created_at: string
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string
    }
    /** AreaUpdate */
    AreaUpdate: {
      /** Name */
      name?: string | null
      /** Description */
      description?: string | null
    }
    /** AreasPublic */
    AreasPublic: {
      /** Data */
      data: components['schemas']['AreaPublic'][]
      /** Count */
      count: number
    }
    /** AssignedQuestionPublic */
    AssignedQuestionPublic: {
      /** Text */
      text: string
      question_type: components['schemas']['QuestionType']
      /** Options */
      options?: unknown | null
      /** Order */
      order: number
      /** Is Mandatory */
      is_mandatory: boolean
      /** Section Id */
      section_id?: string | null
      /** Scoring Weight */
      scoring_weight?: number | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /**
       * Audit Assignment Id
       * Format: uuid
       */
      audit_assignment_id: string
      /** Original Question Template Id */
      original_question_template_id?: string | null
    }
    /** AssignedQuestionUpdate */
    AssignedQuestionUpdate: {
      /** Text */
      text?: string | null
      /** Options */
      options?: unknown | null
      /** Order */
      order?: number | null
      /** Is Mandatory */
      is_mandatory?: boolean | null
      /** Section Id */
      section_id?: string | null
    }
    /** AssignedQuestionsPublic */
    AssignedQuestionsPublic: {
      /** Data */
      data: components['schemas']['AssignedQuestionPublic'][]
      /** Count */
      count: number
    }
    /** AuditAssignmentCreate */
    AuditAssignmentCreate: {
      /** Title */
      title: string
      /** Description */
      description?: string | null
      /** Due Date */
      due_date?: string | null
      /** @default PENDING */
      status: components['schemas']['AuditAssignmentStatus']
      periodicity?: components['schemas']['AuditPeriodicity'] | null
      /** Next Due Date */
      next_due_date?: string | null
      /**
       * Is Public
       * @default false
       */
      is_public: boolean
      /**
       * Audit Template Id
       * Format: uuid
       */
      audit_template_id: string
      /**
       * Company Id
       * Format: uuid
       */
      company_id: string
      /** Area Id */
      area_id?: string | null
    }
    /** AuditAssignmentPublic */
    AuditAssignmentPublic: {
      /** Title */
      title: string
      /** Description */
      description?: string | null
      /** Due Date */
      due_date?: string | null
      /** @default PENDING */
      status: components['schemas']['AuditAssignmentStatus']
      periodicity?: components['schemas']['AuditPeriodicity'] | null
      /** Next Due Date */
      next_due_date?: string | null
      /**
       * Is Public
       * @default false
       */
      is_public: boolean
      /**
       * Id
       * Format: uuid
       */
      id: string
      /**
       * Audit Template Id
       * Format: uuid
       */
      audit_template_id: string
      /**
       * Company Id
       * Format: uuid
       */
      company_id: string
      /** Area Id */
      area_id?: string | null
      /**
       * Created By Id
       * Format: uuid
       */
      created_by_id: string
      /**
       * Created At
       * Format: date-time
       */
      created_at: string
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string
      audit_template?: components['schemas']['AuditTemplatePublic'] | null
      /**
       * Assigned Questions
       * @default []
       */
      assigned_questions: components['schemas']['AssignedQuestionPublic'][]
    }
    /**
     * AuditAssignmentStatus
     * @enum {string}
     */
    AuditAssignmentStatus: 'PENDING' | 'IN_PROGRESS' | 'COMPLETED' | 'OVERDUE'
    /** AuditAssignmentUpdate */
    AuditAssignmentUpdate: {
      /** Title */
      title?: string | null
      /** Description */
      description?: string | null
      /** Due Date */
      due_date?: string | null
      status?: components['schemas']['AuditAssignmentStatus'] | null
      periodicity?: components['schemas']['AuditPeriodicity'] | null
      /** Next Due Date */
      next_due_date?: string | null
      /** Area Id */
      area_id?: string | null
      /** Is Public */
      is_public?: boolean | null
    }
    /** AuditAssignmentsPublic */
    AuditAssignmentsPublic: {
      /** Data */
      data: components['schemas']['AuditAssignmentPublic'][]
      /** Count */
      count: number
    }
    /**
     * AuditPeriodicity
     * @enum {string}
     */
    AuditPeriodicity: 'ONE_TIME' | 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'ANNUALLY'
    /** AuditResponseCreate */
    AuditResponseCreate: {
      /** Overall Comments */
      overall_comments?: string | null
      /** Photo Urls */
      photo_urls?: string[] | null
      /** @default DRAFT */
      status: components['schemas']['AuditResponseStatus']
      /** Score */
      score?: number | null
      /**
       * Audit Assignment Id
       * Format: uuid
       */
      audit_assignment_id: string
      /**
       * Answers
       * @default []
       */
      answers: components['schemas']['AnswerCreate'][] | null
    }
    /** AuditResponsePublic */
    AuditResponsePublic: {
      /** Overall Comments */
      overall_comments?: string | null
      /** Photo Urls */
      photo_urls?: string[] | null
      /** @default DRAFT */
      status: components['schemas']['AuditResponseStatus']
      /** Score */
      score?: number | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /**
       * Audit Assignment Id
       * Format: uuid
       */
      audit_assignment_id: string
      /**
       * Auditor Id
       * Format: uuid
       */
      auditor_id: string
      /** Submission Date */
      submission_date: string | null
      /**
       * Answers
       * @default []
       */
      answers: components['schemas']['AnswerPublic'][]
    }
    /**
     * AuditResponseStatus
     * @enum {string}
     */
    AuditResponseStatus: 'DRAFT' | 'SUBMITTED'
    /** AuditResponseUpdate */
    AuditResponseUpdate: {
      /** Overall Comments */
      overall_comments?: string | null
      /** Photo Urls */
      photo_urls?: string[] | null
      status?: components['schemas']['AuditResponseStatus'] | null
      /** Score */
      score?: number | null
    }
    /** AuditResponsesPublic */
    AuditResponsesPublic: {
      /** Data */
      data: components['schemas']['AuditResponsePublic'][]
      /** Count */
      count: number
    }
    /** AuditTemplateCreate */
    AuditTemplateCreate: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /** Audit Type Definition Key */
      audit_type_definition_key: string
    }
    /** AuditTemplatePublic */
    AuditTemplatePublic: {
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /** Audit Type Definition Key */
      audit_type_definition_key: string
      /**
       * Id
       * Format: uuid
       */
      id: string
      /**
       * Created By Id
       * Format: uuid
       */
      created_by_id: string
      /**
       * Created At
       * Format: date-time
       */
      created_at: string
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string
      /**
       * Question Templates
       * @default []
       */
      question_templates: components['schemas']['QuestionTemplatePublic'][]
    }
    /** AuditTemplateUpdate */
    AuditTemplateUpdate: {
      /** Name */
      name?: string | null
      /** Description */
      description?: string | null
    }
    /** AuditTemplatesPublic */
    AuditTemplatesPublic: {
      /** Data */
      data: components['schemas']['AuditTemplatePublic'][]
      /** Count */
      count: number
    }
    /** Body_login-login_access_token */
    'Body_login-login_access_token': {
      /** Grant Type */
      grant_type?: string | null
      /** Username */
      username: string
      /** Password */
      password: string
      /**
       * Scope
       * @default
       */
      scope: string
      /** Client Id */
      client_id?: string | null
      /** Client Secret */
      client_secret?: string | null
    }
    /** CompaniesPublic */
    CompaniesPublic: {
      /** Data */
      data: components['schemas']['CompanyPublic'][]
      /** Count */
      count: number
    }
    /** CompanyCreate */
    CompanyCreate: {
      /** Name */
      name: string
      /** Details */
      details?: string | null
      /**
       * Is Demo
       * @default false
       */
      is_demo: boolean
    }
    /** CompanyPublic */
    CompanyPublic: {
      /** Name */
      name: string
      /** Details */
      details?: string | null
      /**
       * Is Demo
       * @default false
       */
      is_demo: boolean
      /**
       * Id
       * Format: uuid
       */
      id: string
      /**
       * Created At
       * Format: date-time
       */
      created_at: string
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string
    }
    /** CompanyUpdate */
    CompanyUpdate: {
      /** Name */
      name?: string | null
      /** Details */
      details?: string | null
      /** Is Demo */
      is_demo?: boolean | null
    }
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][]
    }
    /** Message */
    Message: {
      /** Message */
      message: string
    }
    /** NewPassword */
    NewPassword: {
      /** Token */
      token: string
      /** New Password */
      new_password: string
    }
    /** PrivateUserCreate */
    PrivateUserCreate: {
      /** Email */
      email: string
      /** Password */
      password: string
      /** Full Name */
      full_name: string
      /**
       * Is Verified
       * @default false
       */
      is_verified: boolean
    }
    /** QuestionTemplateCreate */
    QuestionTemplateCreate: {
      /** Text */
      text: string
      question_type: components['schemas']['QuestionType']
      /** Options */
      options?: unknown | null
      /** Order */
      order: number
      /**
       * Is Mandatory
       * @default true
       */
      is_mandatory: boolean
      /** Section Id */
      section_id?: string | null
      /** Scoring Weight */
      scoring_weight?: number | null
      /**
       * Audit Template Id
       * Format: uuid
       */
      audit_template_id: string
    }
    /** QuestionTemplatePublic */
    QuestionTemplatePublic: {
      /** Text */
      text: string
      question_type: components['schemas']['QuestionType']
      /** Options */
      options?: unknown | null
      /** Order */
      order: number
      /**
       * Is Mandatory
       * @default true
       */
      is_mandatory: boolean
      /** Section Id */
      section_id?: string | null
      /** Scoring Weight */
      scoring_weight?: number | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /**
       * Audit Template Id
       * Format: uuid
       */
      audit_template_id: string
    }
    /** QuestionTemplateUpdate */
    QuestionTemplateUpdate: {
      /** Text */
      text?: string | null
      question_type?: components['schemas']['QuestionType'] | null
      /** Options */
      options?: unknown | null
      /** Order */
      order?: number | null
      /** Is Mandatory */
      is_mandatory?: boolean | null
      /** Section Id */
      section_id?: string | null
      /** Scoring Weight */
      scoring_weight?: number | null
    }
    /** QuestionTemplatesPublic */
    QuestionTemplatesPublic: {
      /** Data */
      data: components['schemas']['QuestionTemplatePublic'][]
      /** Count */
      count: number
    }
    /**
     * QuestionType
     * @enum {string}
     */
    QuestionType:
      | 'TEXT'
      | 'MULTIPLE_CHOICE_SINGLE'
      | 'MULTIPLE_CHOICE_MULTIPLE'
      | 'YES_NO'
      | 'RATING_SCALE'
      | 'SECTION_HEADER'
    /** Token */
    Token: {
      /** Access Token */
      access_token: string
      /**
       * Token Type
       * @default bearer
       */
      token_type: string
    }
    /** UpdatePassword */
    UpdatePassword: {
      /** Current Password */
      current_password: string
      /** New Password */
      new_password: string
    }
    /** UserCreate */
    UserCreate: {
      /** Email */
      email: string
      /**
       * Is Active
       * @default true
       */
      is_active: boolean
      /**
       * Is Superuser
       * @default false
       */
      is_superuser: boolean
      /** Full Name */
      full_name?: string | null
      /** @default USER */
      role: components['schemas']['UserRole']
      /**
       * Is Verified
       * @default false
       */
      is_verified: boolean
      /** Company Id */
      company_id?: string | null
      /** Password */
      password: string
    }
    /** UserPublic */
    UserPublic: {
      /** Email */
      email: string
      /**
       * Is Active
       * @default true
       */
      is_active: boolean
      /**
       * Is Superuser
       * @default false
       */
      is_superuser: boolean
      /** Full Name */
      full_name?: string | null
      /** @default USER */
      role: components['schemas']['UserRole']
      /**
       * Is Verified
       * @default false
       */
      is_verified: boolean
      /** Company Id */
      company_id?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /**
       * Created At
       * Format: date-time
       */
      created_at: string
    }
    /** UserRegister */
    UserRegister: {
      /** Email */
      email: string
      /** Password */
      password: string
      /** Full Name */
      full_name?: string | null
      /**
       * Company Id
       * Format: uuid
       */
      company_id: string
    }
    /**
     * UserRole
     * @enum {string}
     */
    UserRole: 'ADMIN' | 'AUDITOR' | 'USER'
    /** UserUpdate */
    UserUpdate: {
      /** Email */
      email?: string | null
      /** Password */
      password?: string | null
      /** Full Name */
      full_name?: string | null
      /** Is Active */
      is_active?: boolean | null
      /** Is Superuser */
      is_superuser?: boolean | null
      role?: components['schemas']['UserRole'] | null
      /** Is Verified */
      is_verified?: boolean | null
      /** Company Id */
      company_id?: string | null
    }
    /** UserUpdateMe */
    UserUpdateMe: {
      /** Full Name */
      full_name?: string | null
      /** Email */
      email?: string | null
    }
    /** UsersPublic */
    UsersPublic: {
      /** Data */
      data: components['schemas']['UserPublic'][]
      /** Count */
      count: number
    }
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  'login-login_access_token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': components['schemas']['Body_login-login_access_token']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Token']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'login-test_token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserPublic']
        }
      }
    }
  }
  'login-recover_password': {
    parameters: {
      query?: never
      header?: never
      path: {
        email: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Message']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'login-reset_password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NewPassword']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Message']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'login-recover_password_html_content': {
    parameters: {
      query?: never
      header?: never
      path: {
        email: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/html': string
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'users-read_users': {
    parameters: {
      query?: {
        skip?: number
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UsersPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'users-create_user': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'users-read_user_me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserPublic']
        }
      }
    }
  }
  'users-delete_user_me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Message']
        }
      }
    }
  }
  'users-update_user_me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserUpdateMe']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'users-update_password_me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePassword']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Message']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'users-register_new_user': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserRegister']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'users-read_user_by_id': {
    parameters: {
      query?: never
      header?: never
      path: {
        user_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'users-delete_user': {
    parameters: {
      query?: never
      header?: never
      path: {
        user_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Message']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'users-update_user': {
    parameters: {
      query?: never
      header?: never
      path: {
        user_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'users-assign_user_to_areas': {
    parameters: {
      query?: never
      header?: never
      path: {
        user_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'users-remove_user_from_area': {
    parameters: {
      query?: never
      header?: never
      path: {
        user_id: string
        area_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Message']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'utils-test_email': {
    parameters: {
      query: {
        email_to: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Message']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'utils-health_check': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': boolean
        }
      }
    }
  }
  'companies-read_companies': {
    parameters: {
      query?: {
        skip?: number
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CompaniesPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'companies-create_company': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CompanyCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CompanyPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'companies-read_company_by_id': {
    parameters: {
      query?: never
      header?: never
      path: {
        company_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CompanyPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'companies-delete_company': {
    parameters: {
      query?: never
      header?: never
      path: {
        company_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Message']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'companies-update_company': {
    parameters: {
      query?: never
      header?: never
      path: {
        company_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CompanyUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CompanyPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'areas-read_areas': {
    parameters: {
      query?: {
        skip?: number
        limit?: number
      }
      header?: never
      path: {
        company_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AreasPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'areas-create_area': {
    parameters: {
      query?: never
      header?: never
      path: {
        company_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AreaCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AreaPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'areas-read_area_by_id': {
    parameters: {
      query?: never
      header?: never
      path: {
        company_id: string
        area_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AreaPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'areas-delete_area': {
    parameters: {
      query?: never
      header?: never
      path: {
        company_id: string
        area_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Message']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'areas-update_area': {
    parameters: {
      query?: never
      header?: never
      path: {
        company_id: string
        area_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AreaUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AreaPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-templates-read_audit_templates': {
    parameters: {
      query?: {
        skip?: number
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditTemplatesPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-templates-create_audit_template': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuditTemplateCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditTemplatePublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-templates-get_audit_template_types': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: string
          }[]
        }
      }
    }
  }
  'audit-templates-read_audit_template': {
    parameters: {
      query?: never
      header?: never
      path: {
        template_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditTemplatePublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-templates-update_audit_template': {
    parameters: {
      query?: never
      header?: never
      path: {
        template_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuditTemplateUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditTemplatePublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-templates-read_question_templates_for_audit_template': {
    parameters: {
      query?: {
        skip?: number
        limit?: number
      }
      header?: never
      path: {
        template_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuestionTemplatesPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-templates-create_question_template': {
    parameters: {
      query?: never
      header?: never
      path: {
        template_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['QuestionTemplateCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuestionTemplatePublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-templates-read_question_template_by_id': {
    parameters: {
      query?: never
      header?: never
      path: {
        template_id: string
        question_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuestionTemplatePublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-templates-delete_question_template': {
    parameters: {
      query?: never
      header?: never
      path: {
        template_id: string
        question_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Message']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-templates-update_question_template': {
    parameters: {
      query?: never
      header?: never
      path: {
        template_id: string
        question_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['QuestionTemplateUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuestionTemplatePublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-assignments-read_all_audit_assignments': {
    parameters: {
      query?: {
        skip?: number
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditAssignmentsPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-assignments-create_audit_assignment': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuditAssignmentCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditAssignmentPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-assignments-read_my_audit_assignments': {
    parameters: {
      query?: {
        skip?: number
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditAssignmentsPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-assignments-read_audit_assignments_for_company': {
    parameters: {
      query?: {
        skip?: number
        limit?: number
      }
      header?: never
      path: {
        company_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditAssignmentsPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-assignments-read_audit_assignment_by_id': {
    parameters: {
      query?: never
      header?: never
      path: {
        assignment_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditAssignmentPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-assignments-delete_audit_assignment': {
    parameters: {
      query?: never
      header?: never
      path: {
        assignment_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Message']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-assignments-update_audit_assignment': {
    parameters: {
      query?: never
      header?: never
      path: {
        assignment_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuditAssignmentUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditAssignmentPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-responses-read_audit_responses_for_assignment': {
    parameters: {
      query?: {
        skip?: number
        limit?: number
      }
      header?: never
      path: {
        assignment_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditResponsesPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-responses-create_audit_response': {
    parameters: {
      query?: never
      header?: never
      path: {
        assignment_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuditResponseCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditResponsePublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-responses-read_audit_response_by_id': {
    parameters: {
      query?: never
      header?: never
      path: {
        assignment_id: string
        response_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditResponsePublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'audit-responses-update_audit_response': {
    parameters: {
      query?: never
      header?: never
      path: {
        assignment_id: string
        response_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuditResponseUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditResponsePublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'assigned-questions-read_assigned_questions_for_assignment': {
    parameters: {
      query?: {
        skip?: number
        limit?: number
      }
      header?: never
      path: {
        assignment_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AssignedQuestionsPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'assigned-questions-read_assigned_question_by_id': {
    parameters: {
      query?: never
      header?: never
      path: {
        assignment_id: string
        question_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AssignedQuestionPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'assigned-questions-delete_assigned_question': {
    parameters: {
      query?: never
      header?: never
      path: {
        assignment_id: string
        question_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Message']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'assigned-questions-update_assigned_question': {
    parameters: {
      query?: never
      header?: never
      path: {
        assignment_id: string
        question_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AssignedQuestionUpdate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AssignedQuestionPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  'private-create_user': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrivateUserCreate']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserPublic']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
}
